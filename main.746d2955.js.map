{"version":3,"sources":["scripts/sortHelpers.js","scripts/form.js","scripts/main.js"],"names":["tesIfIncludesNumbers","string","numberRegEx","test","sort","a","b","replace","localeCompare","module","exports","buildForm","document","body","insertAdjacentHTML","createNotification","divClass","message","div","createElement","contains","querySelector","dataset","qa","className","appendChild","setTimeout","remove","validateFormInputs","inputName","inputValue","length","require","lastTarget","tableThead","tableTbody","rows","getElementsByTagName","form","selectActiveRow","target","classList","currentlyActive","add","sortTable","index","order","columnAText","children","innerText","columnBText","forEach","row","insertIntoTable","formData","tableRow","insertRow","data","i","insertCell","saveCellInput","targetedCell","value","initialValue","textContent","addEventListener","theadCellIndex","cellIndex","closest","e","preventDefault","FormData","entries","key","numberFormat","Intl","NumberFormat","push","format","slice","toUpperCase","reset","innerHTML","targetedCellChild","focus"],"mappings":"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","file":"main.746d2955.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tesIfIncludesNumbers = (string) => {\n  const numberRegEx = /\\d/g;\n\n  return numberRegEx.test(string);\n};\n\nconst sort = (a, b) => {\n  if (tesIfIncludesNumbers(a)) {\n    return +a.replace(/[$,]/g, '') - +b.replace(/[$,]/g, '');\n  } else {\n    return a.localeCompare(b);\n  }\n};\n\nmodule.exports = {\n  sort,\n};\n","'use strict';\n\nconst buildForm = () => {\n  const htmlMarkup = `<form class=\"new-employee-form\">\n  <label>Name: <input name=\"name\" data-qa=\"name\" type=\"text\" /></label>\n  <label\n    >Position: <input name=\"position\" data-qa=\"position\" type=\"text\"\n  /></label>\n  <label>\n    Office:\n    <select name=\"office\" data-qa=\"office\">\n      <option disabled selected value=\"\">Select an office</option>\n      <option value=\"Tokyo\">Tokyo</option>\n      <option value=\"Singapore\">Singapore</option>\n      <option value=\"London\">London</option>\n      <option value=\"New York\">New York</option>\n      <option value=\"Edinburgh\">Edinburgh</option>\n      <option value=\"San Francisco\">San Francisco</option>\n    </select>\n  </label>\n  <label>\n    Age: <input name=\"age\" data-qa=\"age\" min=1  type=\"number\" />\n  </label>\n  <label>\n    Salary: <input name=\"salary\" data-qa=\"salary\" min=1000 type=\"number\" />\n  </label>\n  <button type=\"submit\">Save to table</button>\n</form>`;\n\n  document.body.insertAdjacentHTML('beforeend', htmlMarkup);\n};\n\nconst createNotification = (divClass, message) => {\n  const div = document.createElement('div');\n\n  if (document.body.contains(document.querySelector(`.${divClass}`))) {\n    return;\n  }\n\n  div.dataset.qa = 'notification';\n  div.insertAdjacentHTML('beforeend', `<p class='title'>${message}</p>`);\n  div.className = `notification ${divClass}`;\n\n  document.body.appendChild(div);\n\n  setTimeout(() => div.remove(), 3000);\n};\n\nconst validateFormInputs = (inputName, inputValue) => {\n  if (!inputValue) {\n    createNotification('error', 'Fill all the inputs');\n\n    return false;\n  }\n\n  if (inputName === 'name' && inputValue.length < 4) {\n    createNotification('error', 'Name is too short');\n\n    return false;\n  }\n\n  if (inputName === 'age') {\n    if (+inputValue < 18) {\n      createNotification('error', 'You are too young');\n\n      return false;\n    }\n\n    if (+inputValue > 90) {\n      createNotification('error', 'You are too old');\n\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  buildForm,\n  validateFormInputs,\n  createNotification,\n};\n","'use strict';\n\nconst { sort } = require('./sortHelpers.js');\nconst {\n  buildForm,\n  createNotification,\n  validateFormInputs,\n} = require('./form.js');\n\nbuildForm();\n\nlet lastTarget;\nconst tableThead = document.querySelector('thead');\nconst tableTbody = document.querySelector('tbody');\nconst rows = tableTbody.getElementsByTagName('tr');\nconst form = document.querySelector('form');\n\nconst selectActiveRow = (target) => {\n  if (target.classList.contains('active')) {\n    return;\n  }\n\n  const currentlyActive = tableTbody.querySelector('.active');\n\n  if (currentlyActive) {\n    currentlyActive.classList.remove('active');\n  }\n\n  target.classList.add('active');\n};\n\nconst sortTable = (index, order) => {\n  const sortedRows = [...rows].sort((a, b) => {\n    let columnAText = a.children[index].innerText;\n    let columnBText = b.children[index].innerText;\n\n    if (order === 'desc') {\n      [columnAText, columnBText] = [columnBText, columnAText];\n    }\n\n    return sort(columnAText, columnBText);\n  });\n\n  sortedRows.forEach((row) => tableTbody.appendChild(row));\n};\n\nconst insertIntoTable = (formData) => {\n  const tableRow = tableTbody.insertRow(-1);\n\n  formData.forEach((data, i) => {\n    tableRow.insertCell(i).innerText = data;\n  });\n\n  createNotification('success', 'Data added to the table');\n};\n\nconst saveCellInput = (targetedCell, value, initialValue) => {\n  targetedCell.textContent = '';\n\n  if (!value) {\n    targetedCell.textContent = initialValue;\n  } else {\n    targetedCell.textContent = value;\n  }\n};\n\ntableThead.addEventListener('click', ({ target }) => {\n  const theadCellIndex = target.cellIndex;\n\n  if (lastTarget === target.textContent) {\n    sortTable(theadCellIndex, 'desc');\n    lastTarget = null;\n  } else {\n    sortTable(theadCellIndex, 'asc');\n    lastTarget = target.textContent;\n  }\n});\n\ntableTbody.addEventListener('click', ({ target }) => {\n  selectActiveRow(target.closest('tr'));\n});\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const formData = new FormData(form);\n  const data = [];\n\n  for (const [key, value] of formData.entries()) {\n    if (!validateFormInputs(key, value)) {\n      return;\n    }\n\n    if (key === 'salary') {\n      const numberFormat = Intl.NumberFormat('en-US');\n\n      data.push(`$${numberFormat.format(value)}`);\n    } else {\n      data.push(value.slice(0, 1).toUpperCase() + value.slice(1));\n    }\n  }\n\n  insertIntoTable(data);\n  form.reset();\n});\n\ntableTbody.addEventListener('dblclick', ({ target: targetedCell }) => {\n  const initialValue = targetedCell.textContent;\n\n  targetedCell.innerHTML = `<input class=\"cell-input\"/>`;\n\n  const targetedCellChild = targetedCell.children[0];\n\n  targetedCellChild.focus();\n  targetedCellChild.value = initialValue;\n\n  targetedCellChild.addEventListener('blur', ({ target }) => {\n    saveCellInput(targetedCell, target.value, initialValue);\n  });\n\n  targetedCell.addEventListener('keypress', ({ key, target }) => {\n    if (key === 'Enter') {\n      saveCellInput(targetedCell, target.value, initialValue);\n    }\n  });\n});\n"]}